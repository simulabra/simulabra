!import=(:base :lang :test)

~class{
  :name=:point
  :components=(
    ~deffed
    ~var{
      :name=:x
      :type=~number
      :default=0
    }
    ~var{
      :name=:y
      :type=~number
      :default=0
    }
    ~method{
      :name=:dist
      :args=(~self)
      :ret=~number
      :do=[_ ^.x.-(_.x).pow(2).+(.y.-(_.y).pow(2)).sqrt]
    }
    ~method{
      :name=:translate
      :do=[|%x %y|
        .x(.x.+(%x))
        .y(.y.+(%y))
      ]
    }
  )
}

~case{
  :name=:basic-points ; skewer-cased
  :do=[
    %p=~point{:x=3}
    %q=~point{:y=4}
    .assert-eq(%p.dist(%q) 5)
    %p.translate(1 3)
    .assert-eq(%p.dist(~point{}) 5)
  ]
}

~class{
  :name=:math
  :components=(
    ~static{
      :name=:pi
      :do=[^3.14159]
    }
  )
}

~class{
  :name=:shape
  :components=(
    ~point
    ~virtual{
      :name=:area
      :ret=:number
    }
  )
}

~class{
  :name=:circle
  :components=(
    ~shape
    ~var{
      :name=:r
      :type=:number
      :default=1
    }
    ~method{
      :name=:area
      :do=[^~math.pi.*(.r.pow(2))]
    }
  )
}

~case{
  :name=:basic-circles
  :do=[
    %p=~circle{:x=3}
    %q=~circle{:y=4 :r=2}
    .assert-eq(%p.dist(%q) 5)
    .assert-eq(%p.area ~math.pi)
    .assert-eq(%q.area 4.*(~math.pi))
  ]
}

~case{
  :name=:basic-references
  :do=[
    %p=~point{:name=:test :x=7}
    .assert-eq(~point.new.x 0)
    .assert-eq(~point#test.x 7)
  ]
}

~case{
  :name=:basic-closures
  :do=[
    %fn=[_ ^_.*(2)]
    %q=%fn(3)
    .assert-eq(%q 6)
    %fnp=[^.x.*(2)]
    %p=~point{:x=2}
    .assert-eq(%fnp.apply(%p) 4)
  ]
}

~class{
  :name=:waiter
  :components=(
    ~method.new{
      :name=:wait
      :async=@true
      :do=[|%ms|
        ~promise.do([|%resolve|
          @js.setTimeout(1000 [
            %resolve()
          ])
        ])
      ]
    }
  )
}

~async-case{
  :name=:basic-async
  :do=&[
    &~waiter.new.wait(1000);
  ]
}

~class{
  :name=:static-counter
  :components=(
    ~static-var{
      :name=:count
      :default=0
    }
    ~static{
      :name=:inc
      :do=[.count(.count.+(1))]
    }
  )
}

~case{
  :name=:basic-static
  :do=[
    .assert-eq(~static-counter.count 0)
    ~static-counter.inc
    ~static-counter.inc
    .assert-eq(~static-counter.count 2)
  ]
}

~case{
  :name=:basic-conditionals
  :do=[
    ;.assert-eq(@true.$if{:then=1 :else=0} 1)
  ]
}
