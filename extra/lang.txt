parameter grass_energy = 2
parameter sheep_energy = 4

patch Grass
  color green
patch Dirt
  color brown

component Hunger
  has Movement

  var energy = 0

  on move
    energy -= 1
    if energy <= 0:
      starve
  end

  action add_energy(n):
    energy += n
  action starve

agent Wolf:
  has Hunger, Position, Movement
  on spawn:
    randomize()
    wiggle(180)

  on step
    if sheep = within_range(Sheep, 2)
      point_towards(sheep)
    else
      wiggle()
    move()

  on starve:
    # wolf dead
    despawn()

  action eat_sheep:
    var sheep = one_here(Sheep)?
    sheep.die()
    add_energy(sheep_energy)
    # add metadata to log entries
    note sheep_id sheep.id


agent Sheep:
  has Hunger, Position, Movement
  on spawn:
    randomize
    wiggle(180)

  on step:
    do-first-of:
      patch is Grass => eat_grass
      otherwise => wiggle and move

  action eat_grass:
    set_patch(Dirt)
    add_energy(grass_energy)
    python eat_grass(id)

  on starve:
    die
  action die:
    despawn

setup


# predefined

component Base:
  var id

  action spawn
  action despawn

component Position:
  var x
  var y

  fact patch:
    world.patch(x, y)
  fact nearby(other: Position, r = 1) -> bool:
  fact one_here(kind):
    world.query([kind, Position], k => nearby(k.position))
  fact within_range(kind, range)
    abs_diff(x, other.x).squared() + abs_diff(y, other.y).squared() < r.squared()
  action randomize:
    x = SampleRange(World.min_x, World.max_x)
    y = SampleRange(World.min_y, World.may_y)

component Movement:
  has Position
  # degrees
  var direction = 0
  let stride = 1

  action wiggle(deg = 50):
    direction += SampleRange(-deg, deg)
  action move:
    position.x += Math.cos(direction) * stride
    position.y += Math.sin(direction) * stride
