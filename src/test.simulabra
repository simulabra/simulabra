{
  Module
  $name test
  types [
    {
      Interface
      $name Animal
      methods [
        {
          MethodDef
          $name greet
        }
      ]
    } {
      Class
      $name Cat
      is [Animal]
      slots {
        Slots
        name {
          Var
          type String

        }
      }
    } {
      Class
      $name Rat
    }
  ]
  methods [
    {
      Method
      impl Animal/greet
      self Cat
      $do (console say! ([name ':Meow'] concat))
    } {
      Method
      impl Animal/greet
      self Rat
      $do (console say! 'screet')
    }
  ]
  start [
    ({
      Cat
      name 'Dido'
    } greet)
    ({ Rat } greet)

    (console say! (5.3 * (3 + 4)))
  ]
}

{
  Interface
  $name IOStream
  methods [ Methods
    {
      MethodDef
      $name print
      it Object
    }
  ]
}
{
  VecClass
  $name VanderWallsian
  extends [. Format]
  slots [. Number String]
  methods [.
    {
      Method
      $name format
      do ((:0 $dotimes :1) join ", ")
    }
  ]
}
[VanderWallsian 2 "yessir"]
{
  Class
  $name DevNull
  extends [. IOStream]
  methods [.
    {
      Method
      $name print
      do .
    }
  ]
}
{
  Class
  $name Stdout
  it [Union Format Serialize]
}

{
  Impl
  of IOStream
  for Stdout
  methods {.
    print {
      MultiMethod
      impls [.
        ;; fever dream
        {
          Impl
          it Format
          do (@ write (# format))
        }
        {
          Impl
          it Serialize
          do (@ write (# stringify))
        }
      ]
    }
  }
}

{
  Interface
  $name Type
  methods {.

  }
}

([{ List of Number } 1.2 3.5] average)
