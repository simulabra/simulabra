$(def ~class(new {
  name :product
  slots {
    name ~var(new)
    price ~var(new)
    stock ~var(default 0)
  }
}))

$(macro update [name $(rest parts)]
  $(qq .(,name .(,name ,parts)))
)

$(def ~class(new {
  name :vending-machine
  slots {
    balance ~var(new { default 0 })
    products ~var(new { default $(do ^{}) })
    deposit ~method(new {
      desc "add some change into the machine"
      do $(fn [amount]
        $(update balance | add %amount)
      )
    })
    purchase ~method(new {
      desc "buy a product"
      do $(fn [product-name]
        $(let purchase .(stock | get %product-name))
        $(if .(balance | lt %purchase(price)) $(throws "Not enough change"))
        $(if %purchase(stock | lt 1) $(throws "Out of stock"))
        %purchase(dispense)
        $(update balance | sub %purchase(price))
      )
    })
    restock ~method(new {
      do $(fn [product quantity]
        .(inventory | update %product | add %quantity)
      )
    })
    add-product ~method(new {
      do $(fn [product-name]
        .(price-list | update %product | set %price)
      )
    })
  }
}))


$(defn test []
  $(let vm ~vending-machine(new))
  %vm(add-product ~product(new { name :candy price 5 }))
  %vm(add-product :soda 10)
  %vm(restock :candy 10)
  %vm(restock :soda 5)
  %vm(deposit 20)
  %vm(purchase :candy)
  %vm(purchase :soda)
  ~debug(log %vm(balance) %vm(inventory))
)
