the following is some sample simulabra code, which is an object-oriented descendant of lisp where the receiver object preceding the s-expression (in the case of macros like `cond` it is a `$`).
Write a todo list application, with lots of comments about what is happening.

```
; basic syntax
~class ~point ~hash-trie ; class reference
34 "hi there" :my-name ; primitives
%it ; argument/variable reference
5(sqrt) ; message send
%p(x 5) ; message send with arg
~point(new) ; basic constructor is `new` message on class
5(+ 7) ;(=12) arithmetic
4(* 3 | * 2) ;(=24) chaining with |
[1 2 %three 16(sqrt)] ; list
{ prop-one :value prop-two [1 2] } ; object literal with keys `prop-one` and `prop-two`
~point(new { x 3 y 4 }) ; constructor with props `x` and `y`
.(x 5) ; set this' x to 5
.(x | * .(y)) ; multiply this' x by this' y
$(let { v %it(pow 2 | - 1) } .(log "remaining" %v)) ; binding let as a macro with `$` receiver

~class(new { ; define a new class
  name :point ; name it 'point'
  desc "2d point" ; describe it
  components [ ; give it a list of components
    ~var(new { name :x default 0 }) ; a variable x, default 0
    ~var(new { name :y default 0 })
    ~method(new { ; a method
      name :cartesian-dist ; named 'cartesian-dist'
      desc "cartesian distance to other point"
      do $(fn [other] ; which is an fn with an argument %other
        ^.(x | sub %other(x) | pow 2 | add .(y | sub %other(y) | pow 2) | sqrt) ; which returns the result of the message expression
      )
    })
  ]
})

~class(new {
  name :color
  components [
    ~var(new { name :r default 0 })
    ~var(new { name :g default 0 })
    ~var(new { name :b default 0 })
    ~method(new {
      name :hex
      do $(fn []
        ^[.(r) .(g) .(b)](map $(do %it(hex-string 2)) | join "")
      )})
  ]
})

~class(new {
  name :color-point
  components [~point ~color]
})

~case(new {
  name :basic-point-test
  do $(fn []
    $(let p ~point(new))
    $(let q ~color-point(new { x 3 y 2 r 53 g 124 b 37 }))
    %q(y 4)
    .(assert-eq %q(cartesian-dist(%p)))
  )
})
```
